# -*- coding: utf-8 -*-
"""prediccion_precios.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10FLHDLh0GL2ERj29MaxFmSKIQOgw1a5v

# **Importacion de Librerias**
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from xgboost import XGBRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
from sklearn.model_selection import train_test_split

"""# **Lectura de CSV**"""

df = pd.read_csv('airline.csv')
df.info()

"""# **Limpieza de Datos**"""

df.drop(columns=['Unnamed: 0'], inplace=True)

df.isna().sum()

df = df.dropna()

df.duplicated().sum()

df.describe()

df.info()

"""# **Analisis de Datos**

el precio varia por aerolinea?
"""

pricemean = df.groupby('airline')['price'].mean().reset_index().round().sort_values(by='price', ascending=False)
pricemean

plt.figure(figsize=(10, 6))
plt.bar(pricemean['airline'], pricemean['price'])
plt.xlabel('Aerolínea')
plt.ylabel('Precio Promedio')
plt.title('Precio Promedio por Aerolínea')
plt.xticks(rotation=45)
plt.show()

"""Cómo se ve afectado el precio cuando los billetes se compran sólo 1 o 2 días antes de la salida?"""

df_1 = df[df['days_left'] == 1]
df_2 = df[df['days_left'] == 2]

mean_prices_1 = df_1.groupby('departure_time')['price'].mean().reset_index()
mean_prices_2 = df_2.groupby('departure_time')['price'].mean().reset_index()

mean_prices_1

mean_prices_2

plt.figure(figsize=(12, 6))

plt.plot(mean_prices_1['departure_time'], mean_prices_1['price'], marker='o', label='Comprado 1 día antes')
plt.plot(mean_prices_2['departure_time'], mean_prices_2['price'], marker='o', label='Comprado 2 días antes')

plt.xlabel('Departure Time')
plt.ylabel('Precio Promedio')
plt.title('Precio Promedio por Tiempo de Salida y Días Restantes')
plt.legend()
plt.grid(True)
plt.show()

"""el precio del billete cambia según la hora de salida y la hora de llegada?"""

mean_prices_departure = df.groupby('departure_time')['price'].mean().reset_index()
mean_prices_arrival = df.groupby('arrival_time')['price'].mean().reset_index()

mean_prices_departure

mean_prices_arrival

plt.figure(figsize=(12, 6))

sns.lineplot(x='departure_time', y='price', data=mean_prices_departure, marker='o', label='Hora de Salida')
sns.lineplot(x='arrival_time', y='price', data=mean_prices_arrival, marker='o', label='Hora de Llegada')

plt.xlabel('Hora')
plt.ylabel('Precio Promedio')
plt.title('Precio Promedio por Hora de Salida y Hora de Llegada')
plt.legend(title='Tiempo')
plt.grid(True)
plt.show()

"""como cambia el precio con el cambio en origen y destino?"""

mean_prices_source = df.groupby('source_city')['price'].mean().reset_index()
mean_prices_destination = df.groupby('destination_city')['price'].mean().reset_index()

mean_prices_source

mean_prices_destination

plt.figure(figsize=(12, 6))

sns.lineplot(x='source_city', y='price', data=mean_prices_source, marker='o', label='ciudad origen')
sns.lineplot(x='destination_city', y='price', data=mean_prices_destination, marker='o', label='ciudad destino')

plt.xlabel('ciudad')
plt.ylabel('Precio Promedio')
plt.title('Precio Promedio por ciudad de origen y destino')
plt.legend(title='ciudad')
plt.grid(True)
plt.show()

"""como varía el precio del billete entre clase economy y business?"""

mean_prices_class = df.groupby('class')['price'].mean().reset_index()
mean_prices_class

plt.figure(figsize=(8, 6))
sns.barplot(x='class', y='price', data=mean_prices_class)

plt.xlabel('Clase')
plt.ylabel('Precio Promedio')
plt.title('Precio Promedio por Clase')
plt.grid(True)
plt.show()

"""# **Modelo Machine Learning para Prediccion de Precios**

codificando varibles numericas
"""

le = LabelEncoder()
for col in df.columns:
    if df[col].dtype == 'object':
        df[col] = le.fit_transform(df[col])

"""preparando los datos"""

X = df.drop(['price'], axis=1)
y = df['price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)

"""aplicando modelo de regresion lineal"""

scaler = MinMaxScaler(feature_range=(0, 1))
X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)

lr = LinearRegression()
lr.fit(X_train, y_train)

y_pred_train1 = lr.predict(X_train)
y_pred_test1 = lr.predict(X_test)

mse_train1 = mean_squared_error(y_train, y_pred_train1)
r2_train1 = r2_score(y_train, y_pred_train1)
mse_test1 = mean_squared_error(y_test, y_pred_test1)
r2_test1 = r2_score(y_test, y_pred_test1)

print("LR  MSE - Train: {:}".format(mse_train1))
print("LR  R2 - Train: {:}".format(r2_train1))
print("LR  MSE - Test: {:}".format(mse_test1))
print("LR  R2 - Test: {:}".format(r2_test1))

"""aplicando modelo XGBRegressor"""

scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

XGBR = XGBRegressor()
XGBR.fit(X_train_scaled, y_train)

y_pred_train2 = XGBR.predict(X_train_scaled)
y_pred_test2 = XGBR.predict(X_test_scaled)

mse_train2 = mean_squared_error(y_train, y_pred_train2)
mse_test2 = mean_squared_error(y_test, y_pred_test2)
r2_train2 = r2_score(y_train, y_pred_train2)
r2_test2 = r2_score(y_test, y_pred_test2)

print("XGBR  MSE - Train: {:.2f}".format(mse_train2))
print("XGBR  R^2 - Train: {:.2f}".format(r2_train2))
print("XGBR  MSE - Test: {:.2f}".format(mse_test2))
print("XGBR  R^2 - Test: {:.2f}".format(r2_test2))

"""aplicando modelo KNeighborsRegressor"""

scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

KNR = KNeighborsRegressor()
KNR.fit(X_train_scaled, y_train)

y_pred_train3 = KNR.predict(X_train_scaled)
y_pred_test3 = KNR.predict(X_test_scaled)

mse_train3 = mean_squared_error(y_train, y_pred_train3)
mse_test3 = mean_squared_error(y_test, y_pred_test3)
r2_train3 = r2_score(y_train, y_pred_train3)
r2_test3 = r2_score(y_test, y_pred_test3)

print("KNR  MSE - Train: {:.2f}".format(mse_train3))
print("KNR  R^2 - Train: {:.2f}".format(r2_train3))
print("KNR  MSE - Test: {:.2f}".format(mse_test3))
print("KNR  R^2 - Test: {:.2f}".format(r2_test3))

pred=pd.DataFrame({"y_test":y_test,'y_pred':y_pred_test2})
plt.plot(pred[0:50])
plt.legend(['actual','predicted'])
plt.show()